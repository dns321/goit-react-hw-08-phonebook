{"version":3,"sources":["Components/contactForm/ContactForm.module.css","Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","redux/contact/contact-operations.js","redux/contact/contacts-selectors.js","Components/contactForm/ContactForm.js","Components/contactList/ContactList.js","Components/filter/Filter.js","views/ContactsView.js"],"names":["module","exports","dispatch","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","contact","addContactRequest","post","addContactSuccess","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getLoading","state","contacts","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","normolizedFilter","toLowerCase","name","includes","getContactName","map","ContactForm","number","handlerChange","event","currentTarget","value","setState","checkUniqueContact","props","find","handleSubmit","preventDefault","onSubmit","reset","alert","this","fetchContact","className","style","formStyle","inputStyle","type","placeholder","onChange","loadingConntacts","Loader","Component","connect","contactsOperations","deleteContact","id","itemContact","itemContactBtn","onClick","contactsActions","target","inputFilter","ContactsView"],"mappings":"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","file":"static/js/ContactsView.d79401af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"ContactForm_formStyle__13BJ1\",\"inputStyle\":\"ContactForm_inputStyle__3zEtp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContact\":\"ContactList_itemContact__2fZ9P\",\"itemContactBtn\":\"ContactList_itemContactBtn__1o9gS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFilter\":\"Filter_inputFilter__2HVL4\"};","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contact-actions';\n\nconst fetchContact = () => async dispatch => {\n  dispatch(fetchContactRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n};\n\nconst addContact = contact => async dispatch => {\n  const contacts = { contact };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess({ ...data }));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    const { data } = await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\n\nexport default { fetchContact, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normolizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normolizedFilter),\n    );\n  },\n);\n\nexport const getContactName = createSelector([getAllContacts], contacts => {\n  return contacts.map(({ name }) => name);\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contact/contact-operations';\nimport style from './ContactForm.module.css';\nimport { getLoading } from '../../redux/contact/contacts-selectors';\nimport { getContactName } from '../../redux/contact/contacts-selectors';\nimport Loader from '../loader/Loader';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  componentDidMount() {\n    this.props.fetchContact();\n  }\n\n  handlerChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  checkUniqueContact = name => {\n    const findeContact = !this.props.name.find(contact => contact === name);\n    return findeContact;\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name } = this.state;\n    this.checkUniqueContact(name);\n\n    if (this.state.name !== '') {\n      if (!this.checkUniqueContact(name)) {\n        alert(`'${name} isalready in contacts'`);\n        return;\n      } else {\n        this.props.onSubmit(this.state);\n        this.reset();\n      }\n      return;\n    }\n    alert('Enter the name and number');\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} className={style.formStyle}>\n          <label>\n            Name\n            <input\n              className={style.inputStyle}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              value={this.state.name}\n              onChange={this.handlerChange}\n            ></input>\n          </label>\n\n          <label>\n            Number\n            <input\n              className={style.inputStyle}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter phone namber\"\n              value={this.state.number}\n              onChange={this.handlerChange}\n            ></input>\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </form>\n        {this.props.loadingConntacts && <Loader />}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loadingConntacts: getLoading(state),\n  name: getContactName(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContact: () => dispatch(contactsOperations.fetchContact()),\n  onSubmit: data => dispatch(contactsOperations.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contact/contact-operations';\nimport { getVisibleContacts } from '../../redux/contact/contacts-selectors';\nimport style from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={style.itemContact}>\n        {name}: {number}\n        <button\n          className={style.itemContactBtn}\n          type=\"button\"\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normolizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normolizedFilter),\n//   );\n// };\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contact/contact-actions';\nimport style from './Filter.module.css';\nimport { getFilter } from '../../redux/contact/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <input\n      className={style.inputFilter}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event =>\n    dispatch(contactsActions.filterContact(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport ContactForm from '../Components/contactForm/ContactForm';\nimport ContactList from '../Components/contactList/ContactList';\nimport Filter from '../Components/filter/Filter';\n\nclass ContactsView extends Component {\n  render() {\n    return (\n      <>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default ContactsView;\n"],"sourceRoot":""}