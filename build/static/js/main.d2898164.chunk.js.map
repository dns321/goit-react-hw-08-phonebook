{"version":3,"sources":["Components/contactForm/ContactForm.module.css","Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","redux/contact-actions.js","redux/contact-operations.js","redux/contacts-selectors.js","Components/contactForm/ContactForm.js","Components/contactList/ContactList.js","Components/filter/Filter.js","Components/section/Section.js","Components/App.js","redux/contact-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","dispatch","a","get","data","contact","post","contactId","delete","getLoading","state","contacts","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","normolizedFilter","toLowerCase","name","includes","getContactName","map","ContactForm","number","handlerChange","event","currentTarget","value","setState","checkUniqueContact","props","find","handleSubmit","preventDefault","onSubmit","reset","alert","this","fetchContact","className","style","inputStyle","type","placeholder","onChange","loadingConntacts","Component","connect","contactsOperations","deleteContact","id","itemContact","itemContactBtn","onClick","contactsActions","target","inputFilter","Section","children","App","createReducer","_","payload","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2898164.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputStyle\":\"ContactForm_inputStyle__3zEtp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContact\":\"ContactList_itemContact__2fZ9P\",\"itemContactBtn\":\"ContactList_itemContactBtn__1o9gS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFilter\":\"Filter_inputFilter__2HVL4\"};","// import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\n// const addContact = data => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     ...data,\n//   },\n// });\n\n// const addContact = createAction('contact/add', data => ({\n//   payload: {\n//     id: uuidv4(),\n//     ...data,\n//   },\n// }));\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// export const deleteContact = createAction('contact/delete');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n// const filterContact = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\nexport const filterContact = createAction('contact/changeFilter');\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contact-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContact = () => async dispatch => {\n  dispatch(fetchContactRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error));\n  }\n\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(fetchContactSuccess(data)))\n  //   .catch(error => dispatch(fetchContactError(error)));\n};\n\nconst addContact = contact => async dispatch => {\n  const contacts = { contact };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess({ ...data }));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n\n  // axios\n  //   .post('/contacts', contact)\n  //   .then(({ data }) => dispatch(addContactSuccess({ ...data })))\n  //   .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    const { data } = await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  // axios\n  //   .delete(`/contacts/${contactId}`)\n  //   .then(() => dispatch(deleteContactSuccess(contactId)))\n  //   .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport default { fetchContact, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getAllContacts(state);\n//   const filter = getFilter(state);\n//   const normolizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normolizedFilter),\n//   );\n// };\n\n// export const getContactName = state => {\n//   const contacts = getAllContacts(state);\n\n//   return contacts.map(({ name }) => name);\n// };\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normolizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normolizedFilter),\n    );\n  },\n);\n\nexport const getContactName = createSelector([getAllContacts], contacts => {\n  return contacts.map(({ name }) => name);\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contact-operations';\nimport style from './ContactForm.module.css';\nimport { getLoading } from '../../redux/contacts-selectors';\nimport { getContactName } from '../../redux/contacts-selectors';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  componentDidMount() {\n    this.props.fetchContact();\n  }\n\n  handlerChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  checkUniqueContact = name => {\n    const findeContact = !this.props.name.find(contact => contact === name);\n    return findeContact;\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name } = this.state;\n    this.checkUniqueContact(name);\n\n    if (this.state.name !== '') {\n      if (!this.checkUniqueContact(name)) {\n        alert(`'${name} isalready in contacts'`);\n        return;\n      } else {\n        this.props.onSubmit(this.state);\n        this.reset();\n      }\n      return;\n    }\n    alert('Enter the name and number');\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              className={style.inputStyle}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              value={this.state.name}\n              onChange={this.handlerChange}\n            ></input>\n          </label>\n\n          <label>\n            Number\n            <input\n              className={style.inputStyle}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter phone namber\"\n              value={this.state.number}\n              onChange={this.handlerChange}\n            ></input>\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </form>\n        {this.props.loadingConntacts && <h1>LOADING...</h1>}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loadingConntacts: getLoading(state),\n  name: getContactName(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContact: () => dispatch(contactsOperations.fetchContact()),\n  onSubmit: data => dispatch(contactsOperations.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contact-operations';\nimport style from './ContactList.module.css';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={style.itemContact}>\n        {name}: {number}\n        <button\n          className={style.itemContactBtn}\n          type=\"button\"\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normolizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normolizedFilter),\n//   );\n// };\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contact-actions';\nimport style from './Filter.module.css';\nimport { getFilter } from '../../redux/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <input\n      className={style.inputFilter}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event =>\n    dispatch(contactsActions.filterContact(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport style from './Section.module.css';\n\nconst Section = ({ children }) => <section>{children}</section>;\n\nexport default Section;\n","import React from 'react';\nimport './App.scss';\nimport ContactForm from './contactForm/ContactForm';\nimport ContactList from './contactList/ContactList';\nimport Filter from './filter/Filter';\nimport Section from './section/Section';\n\nconst App = () => {\n  return (\n    <>\n      <Section>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContact,\n} from './contact-actions';\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(contact => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst filter = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactReducer from './contact-reducer.js';\nimport {\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\n// const rootReducer = combineReducers({\n//   contacts: contactReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}